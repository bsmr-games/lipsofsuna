Unittest:add(1, "system", "interpolation: samples", function()
	local Interpolation = require("system/math/interpolation")
	local Vector = require("system/math/vector")
	local curve = {1,2,0,3}
	-- Linear.
	assert(Interpolation:interpolate_samples_linear_1d(-1, curve) == 1)
	assert(Interpolation:interpolate_samples_linear_1d(0, curve) == 1)
	assert(Interpolation:interpolate_samples_linear_1d(0.5, curve) == 1.5)
	assert(Interpolation:interpolate_samples_linear_1d(1, curve) == 2)
	assert(Interpolation:interpolate_samples_linear_1d(5, curve) == 3)
	-- Cubic.
	-- TODO: Need sample values for cubic.
	assert(Interpolation:interpolate_samples_cubic_1d(-1, curve) == 1)
	assert(Interpolation:interpolate_samples_cubic_1d(0, curve) == 1)
	assert(Interpolation:interpolate_samples_cubic_1d(0.5, curve) == 1.875)
	assert(Interpolation:interpolate_samples_cubic_1d(1, curve) == 2)
	assert(Interpolation:interpolate_samples_cubic_1d(1.5, curve) == 0.75)
	assert(Interpolation:interpolate_samples_cubic_1d(5, curve) == 3)
	-- Catmull.
	-- TODO: Need sample values for catmull.
end)

Unittest:add(1, "system", "interpolation: segment", function()
	local Interpolation = require("system/math/interpolation")
	local Vector = require("system/math/vector")
	-- Linear.
	assert(Interpolation:interpolate_segment_linear(0, -1, 1) == -1)
	assert(Interpolation:interpolate_segment_linear(0.25, -1, 1) == -0.5)
	assert(Interpolation:interpolate_segment_linear(0.5, -1, 1) == 0)
	assert(Interpolation:interpolate_segment_linear(0.75, -1, 1) == 0.5)
	assert(Interpolation:interpolate_segment_linear(1, -1, 1) == 1)
	assert(Interpolation:interpolate_segment_linear(0, 1, -3) == 1)
	assert(Interpolation:interpolate_segment_linear(0.25, 1, -3) == 0)
	assert(Interpolation:interpolate_segment_linear(0.5, 1, -3) == -1)
	assert(Interpolation:interpolate_segment_linear(0.75, 1, -3) == -2)
	assert(Interpolation:interpolate_segment_linear(1, 1, -3) == -3)
	-- TODO: Need sample values for cubic and catmull.
end)

Unittest:add(1, "system", "interpolation: select", function()
	local Interpolation = require("system/math/interpolation")
	local Vector = require("system/math/vector")
	local curve = {1,2,0,3}
	-- Linear.
	local t,a,b = Interpolation:select_segment_2(-1, curve)
	assert(t == nil)
	assert(a == 1)
	local t,a,b = Interpolation:select_segment_2(0.5, curve)
	assert(t == 0.5)
	assert(a == 1)
	assert(b == 2)
	local t,a,b = Interpolation:select_segment_2(1, curve)
	assert(t == 0)
	assert(a == 2)
	assert(b == 0)
	local t,a,b = Interpolation:select_segment_2(4, curve)
	assert(t == nil)
	assert(a == 3)
	-- Cubic.
	local t,a,b,c,d = Interpolation:select_segment_4(-1, curve)
	assert(t == nil)
	assert(a == 1)
	local t,a,b,c,d = Interpolation:select_segment_4(0.5, curve)
	assert(t == 0.5)
	assert(a == 0)
	assert(b == 1)
	assert(c == 2)
	assert(d == 0)
	local t,a,b,c,d = Interpolation:select_segment_4(1, curve)
	assert(t == 0)
	assert(a == 1)
	assert(b == 2)
	assert(c == 0)
	assert(d == 3)
	local t,a,b,c,d = Interpolation:select_segment_4(2.25, curve)
	assert(t == 0.25)
	assert(a == 2)
	assert(b == 0)
	assert(c == 3)
	assert(d == 6)
	local t,a,b,c,d = Interpolation:select_segment_4(4, curve)
	assert(t == nil)
	assert(a == 3)
end)
