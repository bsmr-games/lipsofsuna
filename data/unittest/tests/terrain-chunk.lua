local assert_stick = function(stick, mat, height, y00, y10, y01, y11)
	assert(stick[1] == mat)
	assert(stick[2] == height)
	assert(stick[3] == y00)
	assert(stick[8] == y10)
	assert(stick[13] == y01)
	assert(stick[18] == y11)
end

Unittest:add(1, "system", "terrain chunk", function()
	local TerrainChunk = require("system/terrain-chunk")
	-- Initialization.
	local t = TerrainChunk(32)
	assert(t)
	assert(type(t.handle) == "userdata")
	-- Loading and unloading.
	assert(not t:get_column(32, 32))
	local c = t:get_column(31, 31)
	assert(type(c) == "table")
	assert(c[1] == nil)
end)

Unittest:add(1, "system", "terrain chunk: add box", function()
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32, 0.5)
	t:add_box(0, 0, 15, 15, 10, 5, 1)
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(4, 2)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(15, 15)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(16, 16)
	assert(#c == 0)
end)

Unittest:add(1, "system", "terrain chunk: add box corners", function()
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32)
	t:add_box_corners(0, 0, 15, 15, 10, 10, 10, 10, 15, 15, 15, 15, 1)
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(4, 2)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(15, 15)
	assert(#c == 2)
	assert_stick(c[1], 0, 10, 0, 0, 0, 0)
	assert_stick(c[2], 1, 5, 0, 0, 0, 0)
	local c = t:get_column(16, 16)
	assert(#c == 0)
	t:add_box_corners(20, 20, 20, 20, 10, 11, 10, 11, 15, 16, 15, 16, 1)
	local c = t:get_column(20, 20)
	assert(#c == 2)
	assert_stick(c[1], 0, 10.5, -0.5, 0.5, -0.5, 0.5)
end)

Unittest:add(1, "system", "terrain chunk: add stick", function()
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32)
	-- Replacing the from the start.
	t:add_stick(0, 0, 0, 40, 3)
	t:add_stick(0, 0, 0, 15, 2)
	t:add_stick(0, 0, 0, 5, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert_stick(c[1], 1, 5, 0, 0, 0, 0)
	assert_stick(c[2], 2, 10, 0, 0, 0, 0)
	assert_stick(c[3], 3, 25, 0, 0, 0, 0)
	-- Replacing multiple from the start.
	t:add_stick(0, 0, 0, 39, 0)
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert_stick(c[1], 0, 39, 0, 0, 0, 0)
	assert_stick(c[2], 3, 1, 0, 0, 0, 0)
	-- Replacing from the start and past the end.
	t:add_stick(0, 0, 0, 50, 5)
	local c = t:get_column(0, 0)
	assert(#c == 1)
	assert_stick(c[1], 5, 50, 0, 0, 0, 0)
end)

Unittest:add(1, "system", "terrain chunk: add stick corners", function()
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32)
	-- Appending a stick.
	assert(t:add_stick_corners(0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10))
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert_stick(c[1], 0, 2.5, -1.5, -0.5, 0.5, 1.5)
	assert_stick(c[2], 10, 4, -1.5, -0.5, 0.5, 1.5)
	-- Overwriting the top.
	assert(t:add_stick_corners(0, 0, 6, 6, 7, 7, 10, 7, 10, 7, 11))
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert_stick(c[1], 0, 2.5, -1.5, -0.5, 0.5, 1.5)
	assert_stick(c[2], 10, 4, -1.5, -0.5, 0.5, 0.5)
	assert_stick(c[3], 11, 2, 1.5, -1.5, 1.5, -1.5)
	-- Overwriting the middle.
	assert(t:add_stick_corners(1, 1, 0, 0, 0, 0, 10, 10, 11, 11, 1))
	local c = t:get_column(1, 1)
	assert(#c == 1)
	assert_stick(c[1], 1, 10.5, -0.5, -0.5, 0.5, 0.5)
	assert(t:add_stick_corners(1, 1, 5, 5, 5, 5, 8, 8, 10, 10, 2))
	local c = t:get_column(1, 1)
	assert(#c == 3)
	assert_stick(c[1], 1, 5, 0, 0, 0, 0)
	assert_stick(c[2], 2, 4, -1, -1, 1, 1)
	assert_stick(c[3], 1, 1.5, -0.5, -0.5, 0.5, 0.5)
	-- XXXXXXXXXXX
	assert(t:add_stick_corners(1, 0, 0, 0, 0, 0, 11, 10, 9, 10, 11))
	assert(t:add_stick_corners(1, 0, 9, 9, 10, 10, 10, 11, 9, 9, 0))
	local c = t:get_column(1, 0)
	--print_column(c)
end)

Unittest:add(1, "system", "terrain chunk: get stick", function()
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32)
	t:add_stick(0, 0, 10, 4, 1)
	t:add_stick(0, 0, 20, 7, 1)
	t:add_stick(0, 0, 30, 1, 1)
	-- First stick.
	local y,h,m = t:get_stick(0, 0, 5)
	assert(y == 0)
	assert(h == 10)
	assert(m == 0)
	-- Middle stick.
	local y,h,m = t:get_stick(0, 0, 25)
	assert(y == 20)
	assert(h == 7)
	assert(m == 1)
	-- Virtual empty stick.
	local y,h,m = t:get_stick(0, 0, 100)
	assert(y == 31)
	assert(h > 10000)
	assert(m == 0)
end)

Unittest:add(1, "system", "terrain chunk: saving and loading", function()
	local Packet = require("system/packet")
	local TerrainChunk = require("system/terrain-chunk")
	local t = TerrainChunk(32)
	t:add_stick(1, 1, 0, 40, 3)
	t:add_stick(4, 4, 0, 40, 3)
	t:add_stick(4, 4, 50, 4, 2)
	-- Serialization 1.
	local writer = Packet(1)
	assert(t:get_chunk_data(writer))
	-- Deserialization 1.
	local reader = writer:copy_readable()
	assert(t:set_chunk_data(reader))
	reader:read()
	assert(t:set_chunk_data(reader))
	-- Serialization 2.
	local writer = Packet(1, "uint32", 0, "uint32", 0, "string", "some data")
	assert(t:get_chunk_data(writer))
	-- Deserialization 2.
	local reader = writer:copy_readable()
	local ok,x,z,s = reader:read("uint32", "uint32", "string")
	assert(ok)
	assert(t:set_chunk_data(reader))
end)
