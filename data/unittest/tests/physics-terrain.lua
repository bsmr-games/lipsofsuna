Unittest:add(1, "system", "physics terrain", function()
	local PhysicsTerrain = require("system/physics-terrain")
	local Terrain = require("system/terrain")
	local Vector = require("system/math/vector")
	local t = Terrain(32, 2)
	t:load_chunk(0, 0)
	t:add_stick(1, 1, 0, 40, 3)
	-- Initialization.
	local p = PhysicsTerrain(t)
	assert(p)
	assert(type(p) == "table")
	assert(type(p.handle) == "userdata")
end)

Unittest:add(1, "system", "physics terrain: garbage collection", function()
	local PhysicsTerrain = require("system/physics-terrain")
	local Terrain = require("system/terrain")
	local t = Terrain(32, 2)
	t:load_chunk(0, 0)
	t:add_stick(1, 1, 0, 40, 3)
	local p = PhysicsTerrain(t)
	assert(p:get_valid())
	t = nil
	collectgarbage()
	assert(not p:get_valid())
end)

Unittest:add(1, "system", "physics terrain: ray cast", function()
	local Physics = require("system/physics")
	local PhysicsTerrain = require("system/physics-terrain")
	local Terrain = require("system/terrain")
	local Vector = require("system/math/vector")
	local t = Terrain(32, 2)
	t:load_chunk(0, 0)
	t:add_stick(1, 1, 0, 40, 3)
	local p = PhysicsTerrain(t)
	p:set_id(100)
	p:set_visible(true)
	p:update()
	-- Normal collision.
	local r = Physics:cast_ray(Vector(-10,1,-10), Vector(10,1,10))
	assert(type(r) == "table")
	assert(r.terrain == 100)
	assert(r.tile.x == 1)
	assert(r.tile.z == 1)
	assert(math.abs(r.point.x - 2) < 0.1)
	assert(math.abs(r.point.y - 1) < 0.1)
	assert(math.abs(r.point.z - 2) < 0.1)
	assert(r.normal.x < 0.7)
	assert(math.abs(r.normal.y) < 0.1)
	assert(r.normal.z < 0.7)
	-- Collision mask.
	p:set_collision_mask(0)
	local r = Physics:cast_ray(Vector(-10,1,-10), Vector(10,1,10))
	assert(r == nil)
	p:set_collision_mask(0xFFFF)
	local r = Physics:cast_ray(Vector(-10,1,-10), Vector(10,1,10))
	assert(type(r) == "table")
	-- Visibility.
	p:set_visible(false)
	local r = Physics:cast_ray(Vector(-10,1,-10), Vector(10,1,10))
	assert(r == nil)
	p:set_visible(true)
	local r = Physics:cast_ray(Vector(-10,1,-10), Vector(10,1,10))
	assert(type(r) == "table")
end)

Unittest:add(1, "system", "physics terrain: sphere cast", function()
	local Physics = require("system/physics")
	local PhysicsTerrain = require("system/physics-terrain")
	local Terrain = require("system/terrain")
	local Vector = require("system/math/vector")
	local t = Terrain(32, 2)
	t:load_chunk(0, 0)
	t:add_stick(1, 1, 0, 40, 3)
	local p = PhysicsTerrain(t)
	p:set_id(100)
	p:set_visible(true)
	p:update()
	-- Normal collision.
	local r = Physics:cast_sphere(Vector(-10,1,-10), Vector(10,1,10), 1)
	assert(type(r) == "table")
	assert(r.terrain == 100)
	assert(r.tile.x == 1)
	assert(r.tile.z == 1)
	assert(math.abs(r.point.x - 2) < 0.1)
	assert(math.abs(r.point.y - 1) < 0.1)
	assert(math.abs(r.point.z - 2) < 0.1)
	assert(r.normal.x < 0.7)
	assert(math.abs(r.normal.y) < 0.1)
	assert(r.normal.z < 0.7)
	-- Collision mask.
	p:set_collision_mask(0)
	local r = Physics:cast_sphere(Vector(-10,1,-10), Vector(10,1,10), 1)
	assert(r == nil)
	p:set_collision_mask(0xFFFF)
	local r = Physics:cast_sphere(Vector(-10,1,-10), Vector(10,1,10), 1)
	assert(type(r) == "table")
	-- Visibility.
	p:set_visible(false)
	local r = Physics:cast_sphere(Vector(-10,1,-10), Vector(10,1,10), 1)
	assert(r == nil)
	p:set_visible(true)
	local r = Physics:cast_sphere(Vector(-10,1,-10), Vector(10,1,10), 1)
	assert(type(r) == "table")
end)

Unittest:add(1, "system", "physics terrain: update", function()
	local Physics = require("system/physics")
	local PhysicsTerrain = require("system/physics-terrain")
	local Terrain = require("system/terrain")
	local t = Terrain(32, 2)
	t:load_chunk(0, 0)
	t:add_stick(1, 1, 0, 40, 3)
	local p = PhysicsTerrain(t)
	p:set_id(100)
	p:set_visible(true)
	p:update()
end)
