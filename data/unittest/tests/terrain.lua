local print_column = function(c)
	print("Column:")
	for k,v in ipairs(c) do
		print(string.format("  Stick %d: m=%d, h=%d", k, v[1], v[2]))
	end
end

Unittest:add(1, "system", "terrain", function()
	local Terrain = require("system/terrain")
	-- Initialization.
	local t = Terrain(32, 0.5)
	assert(t)
	assert(type(t.handle) == "userdata")
	-- Loading and unloading.
	assert(not t:get_column(100, 100))
	assert(t:load_chunk(100, 100))
	local c = t:get_column(100, 100)
	assert(type(c) == "table")
	assert(c[1] == nil)
	assert(t:unload_chunk(100, 100))
	assert(not t:get_column(100, 100))
end)

Unittest:add(1, "system", "terrain: add empty", function()
	local Terrain = require("system/terrain")
	local t = Terrain(32, 0.5)
	t:load_chunk(0, 0)
	-- Adding empty to an empty column.
	t:add_stick(0, 0, 10, 5, 0)
	local c = t:get_column(0, 0)
	assert(#c == 0)
	-- Appending to an empty column.
	t:add_stick(0, 0, 0, 5, 1)
	local c = t:get_column(0, 0)
	assert(#c == 1)
	assert(c[1][1] == 1)
	assert(c[1][2] == 5)
	-- Appending empty to a non-empty column.
	t:add_stick(0, 0, 100, 5, 0)
	local c = t:get_column(0, 0)
	assert(#c == 1)
	assert(c[1][1] == 1)
	assert(c[1][2] == 5)
	-- Overwriting a column with empty.
	t:add_stick(0, 0, 0, 5, 0)
	local c = t:get_column(0, 0)
	assert(#c == 0)
	-- Appending to an empty column with padding.
	t:add_stick(1, 0, 10, 5, 1)
	local c = t:get_column(1, 0)
	assert(#c == 2)
	assert(c[1][1] == 0)
	assert(c[1][2] == 10)
	assert(c[2][1] == 1)
	assert(c[2][2] == 5)
end)

Unittest:add(1, "system", "terrain: add end", function()
	local Terrain = require("system/terrain")
	local t = Terrain(32, 0.5)
	t:load_chunk(0, 0)
	-- Replacing the from the end.
	t:add_stick(0, 0, 0, 40, 3)
	t:add_stick(0, 0, 25, 15, 2)
	t:add_stick(0, 0, 35, 5, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 3)
	assert(c[1][2] == 25)
	assert(c[2][1] == 2)
	assert(c[2][2] == 10)
	assert(c[3][1] == 1)
	assert(c[3][2] == 5)
	-- Replacing multiple from the end.
	t:add_stick(0, 0, 5, 55, 4)
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert(c[1][1] == 3)
	assert(c[1][2] == 5)
	assert(c[2][1] == 4)
	assert(c[2][2] == 55)
end)

Unittest:add(1, "system", "terrain: add middle", function()
	local Terrain = require("system/terrain")
	local t = Terrain(32, 0.5)
	t:load_chunk(0, 0)
	-- 000011112222
	--   1111
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 2, 4, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 2)
	assert(c[2][1] == 1)
	assert(c[2][2] == 6)
	assert(c[3][1] == 2)
	assert(c[3][2] == 4)
	-- 000011112222
	--     1111
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 4, 4, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 1)
	assert(c[2][2] == 4)
	assert(c[3][1] == 2)
	assert(c[3][2] == 4)
	-- 000011112222
	--      11
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 5, 2, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 1)
	assert(c[2][2] == 4)
	assert(c[3][1] == 2)
	assert(c[3][2] == 4)
	-- 000011112222
	--       1111
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 6, 4, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 1)
	assert(c[2][2] == 6)
	assert(c[3][1] == 2)
	assert(c[3][2] == 2)
	-- 000011112222
	--   11111111
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 2, 8, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 2)
	assert(c[2][1] == 1)
	assert(c[2][2] == 8)
	assert(c[3][1] == 2)
	assert(c[3][2] == 2)
	-- 000011112222
	--   3333
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 2, 4, 3)
	local c = t:get_column(0, 0)
	assert(#c == 4)
	assert(c[1][1] == 0)
	assert(c[1][2] == 2)
	assert(c[2][1] == 3)
	assert(c[2][2] == 4)
	assert(c[3][1] == 1)
	assert(c[3][2] == 2)
	assert(c[4][1] == 2)
	assert(c[4][2] == 4)
	-- 000011112222
	--     3333
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 4, 3.99999, 3)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 3)
	assert(c[2][2] == 4)
	assert(c[3][1] == 2)
	assert(c[3][2] == 4)
	-- 000011112222
	--      33
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 5, 2, 3)
	local c = t:get_column(0, 0)
	assert(#c == 5)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 1)
	assert(c[2][2] == 1)
	assert(c[3][1] == 3)
	assert(c[3][2] == 2)
	assert(c[4][1] == 1)
	assert(c[4][2] == 1)
	assert(c[5][1] == 2)
	assert(c[5][2] == 4)
	-- 000011112222
	--       3333
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 6, 4, 3)
	local c = t:get_column(0, 0)
	assert(#c == 4)
	assert(c[1][1] == 0)
	assert(c[1][2] == 4)
	assert(c[2][1] == 1)
	assert(c[2][2] == 2)
	assert(c[3][1] == 3)
	assert(c[3][2] == 4)
	assert(c[4][1] == 2)
	assert(c[4][2] == 2)
	-- 000011112222
	--   33333333
	t:clear_column(0, 0)
	t:add_stick(0, 0, 4, 4, 1)
	t:add_stick(0, 0, 8, 4, 2)
	t:add_stick(0, 0, 2, 8, 3)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 0)
	assert(c[1][2] == 2)
	assert(c[2][1] == 3)
	assert(c[2][2] == 8)
	assert(c[3][1] == 2)
	assert(c[3][2] == 2)
end)

Unittest:add(1, "system", "terrain: add start", function()
	local Terrain = require("system/terrain")
	local t = Terrain(32, 0.5)
	t:load_chunk(0, 0)
	-- Replacing the from the start.
	t:add_stick(0, 0, 0, 40, 3)
	t:add_stick(0, 0, 0, 15, 2)
	t:add_stick(0, 0, 0, 5, 1)
	local c = t:get_column(0, 0)
	assert(#c == 3)
	assert(c[1][1] == 1)
	assert(c[1][2] == 5)
	assert(c[2][1] == 2)
	assert(c[2][2] == 10)
	assert(c[3][1] == 3)
	assert(c[3][2] == 25)
	-- Replacing multiple from the start.
	t:add_stick(0, 0, 0, 39, 0)
	local c = t:get_column(0, 0)
	assert(#c == 2)
	assert(c[1][1] == 0)
	assert(c[1][2] == 39)
	assert(c[2][1] == 3)
	assert(c[2][2] == 1)
	-- Replacing from the start and past the end.
	t:add_stick(0, 0, 0, 50, 5)
	local c = t:get_column(0, 0)
	assert(#c == 1)
	assert(c[1][1] == 5)
	assert(c[1][2] == 50)
end)
